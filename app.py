import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import time
import random
import re
import numpy as np
from utils.nlp_utils import tokenizar_texto, lematizar_texto, pos_tagging, crear_embedding, similaridad_textos, extraer_keywords
from utils.analysis import analizar_empresa, generar_mensaje_resultado

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="FinanzGPT - Asistente Financiero",
    page_icon="üíπ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configuraciones CSS personalizadas con estilo similar a ChatGPT
st.markdown("""
<style>
    /* Estilos generales */
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #353740;
        background-color: #F7F7F8;
    }
    
    /* T√≠tulos y encabezados */
    .main-title {
        font-size: 2.2rem;
        font-weight: 600;
        color: #10A37F;
        margin-bottom: 1rem;
        text-align: center;
    }
    
    .sub-title {
        font-size: 1.4rem;
        font-weight: 500;
        color: #444654;
        margin-bottom: 1rem;
        text-align: center;
    }
    
    /* Mensajes de chat */
    .chat-container {
        display: flex;
        flex-direction: column;
        gap: 10px;
        padding: 10px;
        max-width: 900px;
        margin: 0 auto;
    }
    
    .chat-message-user {
        background-color: #FFFFFF;
        border-radius: 8px;
        padding: 15px;
        margin: 5px 0;
        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        color: #353740;
        font-size: 16px;
        position: relative;
        display: flex;
        align-items: flex-start;
    }
    
    .chat-message-bot {
        background-color: #F7F7F8;
        border-radius: 8px;
        padding: 15px;
        margin: 5px 0;
        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        color: #353740;
        font-size: 16px;
        position: relative;
        display: flex;
        align-items: flex-start;
    }
    
    .avatar {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-right: 15px;
        flex-shrink: 0;
    }
    
    .avatar-user {
        background-color: #10A37F;
        color: white;
        font-weight: bold;
    }
    
    .avatar-bot {
        background-color: #0FA47F;
        color: white;
        font-weight: bold;
    }
    
    .message-content {
        flex-grow: 1;
        line-height: 1.5;
    }
    
    /* Tarjetas y componentes */
    .card {
        background-color: #FFFFFF;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin-bottom: 20px;
        color: #353740;
    }
    
    .highlight-metric {
        background-color: #F8FAFC;
        padding: 15px;
        border-radius: 8px;
        margin: 10px 0;
        font-weight: 500;
        color: #353740;
        border-left: 4px solid #10A37F;
        transition: all 0.3s ease;
    }
    
    .highlight-metric:hover {
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    
    /* Estados financieros */
    .estado-excelente {
        background-color: #10A37F;
        color: white;
        padding: 15px;
        border-radius: 8px;
        text-align: center;
        font-weight: 600;
        box-shadow: 0 2px 8px rgba(16, 163, 127, 0.3);
    }
    
    .estado-bueno {
        background-color: #3B82F6;
        color: white;
        padding: 15px;
        border-radius: 8px;
        text-align: center;
        font-weight: 600;
        box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
    }
    
    .estado-regular {
        background-color: #F59E0B;
        color: white;
        padding: 15px;
        border-radius: 8px;
        text-align: center;
        font-weight: 600;
        box-shadow: 0 2px 8px rgba(245, 158, 11, 0.3);
    }
    
    .estado-critico {
        background-color: #EF4444;
        color: white;
        padding: 15px;
        border-radius: 8px;
        text-align: center;
        font-weight: 600;
        box-shadow: 0 2px 8px rgba(239, 68, 68, 0.3);
    }
    
    /* Recomendaciones */
    .recomendacion {
        background-color: #FFFBEB;
        padding: 12px;
        border-radius: 8px;
        margin: 8px 0;
        border-left: 4px solid #F59E0B;
        color: #353740;
        font-weight: 400;
        transition: transform 0.2s ease;
    }
    
    .recomendacion:hover {
        transform: translateX(5px);
    }
    
    /* Formulario */
    .stTextInput > div > div > input {
        border-radius: 8px;
        border: 1px solid #E5E7EB;
        padding: 12px;
        font-size: 16px;
    }
    
    .stTextInput > div > div > input:focus {
        border-color: #10A37F;
        box-shadow: 0 0 0 2px rgba(16, 163, 127, 0.2);
    }
    
    .stButton > button {
        background-color: #10A37F;
        color: white;
        border-radius: 8px;
        padding: 10px 20px;
        font-weight: 500;
        border: none;
        transition: all 0.3s ease;
    }
    
    .stButton > button:hover {
        background-color: #0C8D6C;
        box-shadow: 0 4px 12px rgba(16, 163, 127, 0.3);
    }
    
    /* Chat input */
    .stChatInput > div > textarea {
        border-radius: 8px;
        border: 1px solid #E5E7EB;
        padding: 12px;
        font-size: 16px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }
    
    .stChatInput > div > textarea:focus {
        border-color: #10A37F;
        box-shadow: 0 0 0 2px rgba(16, 163, 127, 0.2);
    }
    
    /* Sidebar */
    .sidebar .sidebar-content {
        background-color: #FFFFFF;
    }
    
    /* Esconder elementos de streamlit */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    
    /* Botones de navegaci√≥n */
    .nav-button {
        background-color: #F8FAFC;
        border: 1px solid #E5E7EB;
        border-radius: 8px;
        padding: 10px;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s ease;
        display: block;
        width: 100%;
        margin-bottom: 8px;
        font-weight: 500;
        color: #444654;
    }
    
    .nav-button:hover {
        background-color: #F0F9F6;
        border-color: #10A37F;
        color: #10A37F;
    }
    
    .nav-button-active {
        background-color: #10A37F;
        color: white;
        border: 1px solid #10A37F;
        border-radius: 8px;
        padding: 10px;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s ease;
        display: block;
        width: 100%;
        margin-bottom: 8px;
        font-weight: 500;
    }
    
    /* Animaci√≥n de pensamiento */
    .thinking-animation {
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 20px 0;
    }
    
    .thinking-dot {
        width: 10px;
        height: 10px;
        margin: 0 5px;
        background-color: #10A37F;
        border-radius: 50%;
        animation: pulse 1.5s infinite ease-in-out;
    }
    
    .thinking-dot:nth-child(2) {
        animation-delay: 0.2s;
    }
    
    .thinking-dot:nth-child(3) {
        animation-delay: 0.4s;
    }
    
    @keyframes pulse {
        0%, 100% {
            transform: scale(0.8);
            opacity: 0.5;
        }
        50% {
            transform: scale(1.2);
            opacity: 1;
        }
    }
    
    /* Tooltips y elementos informativos */
    .info-tooltip {
        display: inline-block;
        width: 18px;
        height: 18px;
        background-color: #E5E7EB;
        color: #6B7280;
        border-radius: 50%;
        text-align: center;
        line-height: 18px;
        margin-left: 5px;
        font-size: 12px;
        cursor: help;
    }
    
    /* Gr√°ficos */
    .chart-container {
        background-color: white;
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    
    /* Men√∫ de ayuda */
    .help-menu {
        background-color: #F0F9F6;
        border: 1px solid #10A37F;
        border-radius: 8px;
        padding: 15px;
        margin: 10px 0;
    }
    
    .help-item {
        padding: 8px 12px;
        margin: 5px 0;
        background-color: #E6F7F1;
        border-radius: 5px;
        transition: all 0.2s ease;
    }
    
    .help-item:hover {
        background-color: #D1F0E6;
        transform: translateX(5px);
    }
</style>
""", unsafe_allow_html=True)

# Funci√≥n para formatear n√∫meros grandes
def formato_numero(numero):
    """
    Formatea un n√∫mero grande para mejor legibilidad.
    Ejemplo: 1234567 -> 1,234,567
    
    Args:
        numero (float): N√∫mero a formatear
    
    Returns:
        str: N√∫mero formateado
    """
    return f"{numero:,.0f}"

# Funci√≥n para mostrar animaci√≥n de "pensando"
def mostrar_procesamiento():
    """Muestra una animaci√≥n de procesamiento estilo ChatGPT"""
    with st.spinner(''):
        st.markdown("""
        <div class="thinking-animation">
            <div class="thinking-dot"></div>
            <div class="thinking-dot"></div>
            <div class="thinking-dot"></div>
        </div>
        """, unsafe_allow_html=True)
        
        # Simulaci√≥n de procesamiento
        time.sleep(2)
        
        # Mostrar mensaje de √©xito al completar
        st.success('An√°lisis completado')
        time.sleep(0.5)

# Funci√≥n para validar entradas num√©ricas
def validar_numeros(valor, min_valor=0.0, nombre="valor"):
    """
    Valida que un valor num√©rico est√© dentro de un rango aceptable.
    
    Args:
        valor (float): Valor a validar
        min_valor (float): Valor m√≠nimo aceptable
        nombre (str): Nombre del campo para mensajes de error
        
    Returns:
        tuple: (bool, str) - (es_valido, mensaje_error)
    """
    if valor is None:
        return False, f"Por favor, ingresa un {nombre}."
    
    try:
        num_valor = float(valor)
        if num_valor < min_valor:
            return False, f"El {nombre} debe ser mayor o igual a {min_valor}."
        return True, ""
    except ValueError:
        return False, f"El {nombre} debe ser un n√∫mero v√°lido."

# Funci√≥n para detectar si un mensaje est√° fuera del √°mbito financiero
def es_mensaje_no_financiero(mensaje):
    """
    Detecta si un mensaje est√° fuera del √°mbito financiero.
    
    Args:
        mensaje (str): Mensaje del usuario
        
    Returns:
        bool: True si el mensaje no es financiero, False si es financiero
    """
    # Palabras clave de saludos comunes
    saludos = ['hola', 'buenos d√≠as', 'buenas tardes', 'buenas noches', 'saludos', 'qu√© tal', 'como estas', 'c√≥mo est√°s', 'como vas', 'qu√© hay']
    
    # Palabras clave de despedidas
    despedidas = ['adi√≥s', 'chao', 'hasta luego', 'nos vemos', 'bye', 'hasta pronto', 'hasta ma√±ana']
    
    # Palabras clave sobre estados emocionales
    emociones = ['triste', 'feliz', 'deprimido', 'ansioso', 'estresado', 'cansado', 'aburrido', 'mal', 'bien', 'enfermo']
    
    # Palabras clave sobre temas personales
    temas_personales = ['salud', 'vida', 'familia', 'amigo', 'amor', 'relaci√≥n', 'matrimonio', 'hijo', 'ni√±o', 'mascota']
    
    # Peticiones de ayuda generales
    ayuda_general = ['ayuda', 'ay√∫dame', 'socorro', 'sos', 'help']
    
    # Verificar si el mensaje coincide con alguna categor√≠a
    mensaje_lower = mensaje.lower()
    
    # Detectar saludos simples
    if any(saludo == mensaje_lower for saludo in saludos):
        return True, "saludo"
    
    # Detectar despedidas simples
    if any(despedida == mensaje_lower for despedida in despedidas):
        return True, "despedida"
        
    # Detectar si es una petici√≥n de ayuda general
    if any(ayuda == mensaje_lower for ayuda in ayuda_general):
        return True, "ayuda"
    
    # Detectar emociones o temas personales
    if any(emocion in mensaje_lower for emocion in emociones):
        return True, "emocion"
    
    if any(tema in mensaje_lower for tema in temas_personales):
        return True, "personal"
    
    # Detectar mensajes muy cortos o sin palabras clave financieras
    if len(mensaje_lower.split()) < 2:
        # Puede ser una respuesta corta no financiera
        return True, "corto"
    
    # Palabras clave financieras para verificar si es un mensaje financiero
    palabras_financieras = [
        'finanza', 'empresa', 'dinero', 'capital', 'beneficio', 'ganancia', 'activo', 'pasivo', 
        'deuda', 'pr√©stamo', 'inversion', 'cartera', 'cr√©dito', 'liquidez', 'rentabilidad', 
        'margen', 'impuesto', 'pago', 'cobro', 'factura', 'balance', 'contabilidad', 'inventario',
        'flujo', 'costo', 'ingreso', 'gasto', 'ratio', 'indicador', 'estado', 'an√°lisis',
        'endeudamiento', 'productividad', 'rotaci√≥n'
    ]
    
    # Si contiene alguna palabra financiera, considerarlo como mensaje financiero
    if any(palabra in mensaje_lower for palabra in palabras_financieras):
        return False, "financiero"
    
    # Por defecto, considerar como no financiero
    return True, "otro"

# Funci√≥n para responder a mensajes no financieros
def responder_mensaje_no_financiero(tipo):
    """
    Genera respuestas para mensajes que no son de √≠ndole financiera.
    
    Args:
        tipo (str): Tipo de mensaje no financiero
        
    Returns:
        str: Respuesta apropiada
    """
    if tipo == "saludo":
        saludos = [
            "üëã ¬°Hola! Soy FinanzGPT, tu asistente financiero empresarial. ¬øEn qu√© puedo ayudarte hoy con respecto a tus finanzas?",
            "¬°Hola! Estoy aqu√≠ para ayudarte con el an√°lisis financiero de tu empresa. ¬øQu√© te gustar√≠a saber?",
            "¬°Saludos! Soy tu asistente especializado en an√°lisis financiero empresarial. ¬øTienes alguna consulta sobre tus indicadores financieros?"
        ]
        return random.choice(saludos)
    
    elif tipo == "despedida":
        despedidas = [
            "¬°Hasta pronto! Recuerda revisar peri√≥dicamente tus indicadores financieros para mantener el control de tu empresa.",
            "¬°Adi√≥s! Si tienes m√°s preguntas sobre finanzas empresariales en el futuro, estar√© aqu√≠ para ayudarte.",
            "¬°Que tengas un buen d√≠a! Estar√© disponible cuando necesites m√°s an√°lisis financieros para tu empresa."
        ]
        return random.choice(despedidas)
    
    elif tipo == "emocion" or tipo == "personal":
        respuestas = [
            "Como asistente financiero, estoy dise√±ado para ayudarte con indicadores y an√°lisis econ√≥micos de tu empresa. ¬øTe gustar√≠a que analiz√°ramos alg√∫n aspecto financiero espec√≠fico?",
            "Mi especialidad es el an√°lisis financiero empresarial. ¬øPuedo ayudarte con alguna consulta sobre tus indicadores econ√≥micos?",
            "Estoy programado para asistirte en temas financieros empresariales. ¬øHay alg√∫n aspecto financiero de tu empresa sobre el que quieras informaci√≥n?"
        ]
        return random.choice(respuestas)
    
    elif tipo == "ayuda":
        # Mostrar men√∫ de opciones de ayuda
        respuesta = """### üîç ¬øEn qu√© puedo ayudarte?

Soy FinanzGPT, tu asistente especializado en an√°lisis financiero empresarial. Puedo ayudarte con:

1. **An√°lisis de endeudamiento**: Evaluaci√≥n de tu ratio de deuda y recomendaciones para optimizarlo
2. **An√°lisis de rentabilidad**: Evaluaci√≥n de tu ROA y estrategias para mejorar tus beneficios
3. **An√°lisis de productividad**: Evaluaci√≥n del rendimiento por empleado y consejos para aumentarlo
4. **An√°lisis de rotaci√≥n de cartera**: Evaluaci√≥n de tu ciclo de cobro y m√©todos para acelerarlo
5. **An√°lisis de liquidez**: Evaluaci√≥n de tu capacidad para cubrir obligaciones a corto plazo
6. **Resumen general financiero**: Visi√≥n global de todos tus indicadores financieros

Para consultar, simplemente pregunta por ejemplo: *"¬øC√≥mo est√° mi endeudamiento?"* o *"¬øQu√© puedo hacer para mejorar mi rentabilidad?"*"""
        return respuesta
    
    elif tipo == "corto" or tipo == "otro":
        respuestas = [
            "Soy un asistente especializado en an√°lisis financiero empresarial. ¬øPuedo ayudarte con alguna consulta sobre indicadores financieros de tu empresa?",
            "Estoy aqu√≠ para ayudarte con an√°lisis econ√≥mico y financiero. ¬øQu√© indicador financiero te gustar√≠a analizar?",
            "Como asistente financiero, puedo ayudarte a interpretar tus indicadores y darte recomendaciones para mejorar la salud econ√≥mica de tu empresa. ¬øQu√© aspecto te interesa analizar?"
        ]
        return random.choice(respuestas)

# Funci√≥n mejorada para respuestas del chatbot estilo ChatGPT
def chatbot_response(mensaje, datos_empresa=None):
    """
    Genera respuestas del chatbot basadas en el mensaje del usuario y los datos de la empresa.
    
    Args:
        mensaje (str): Mensaje del usuario
        datos_empresa (dict, optional): Datos de la empresa
        
    Returns:
        str: Respuesta del chatbot
    """
    # Verificar si es un mensaje no financiero
    es_no_financiero, tipo = es_mensaje_no_financiero(mensaje)
    
    if es_no_financiero:
        return responder_mensaje_no_financiero(tipo)
    
    # Si el mensaje es financiero, continuar con el an√°lisis normal
    # Aplicar NLP al mensaje
    tokens = tokenizar_texto(mensaje)
    lemas = lematizar_texto(mensaje)
    pos_tags = pos_tagging(mensaje)
    keywords = extraer_keywords(mensaje, 3)
    
    # Mensajes predefinidos para diferentes situaciones
    mensajes_predefinidos = {
        'saludo': [
            "üëã ¬°Hola! Soy FinanzGPT, tu asistente especializado en an√°lisis financiero empresarial. ¬øEn qu√© puedo ayudarte hoy?",
            "¬°Saludos! Estoy aqu√≠ para ayudarte a entender mejor la situaci√≥n financiera de tu empresa. ¬øQu√© te gustar√≠a saber?",
            "Hola, soy tu asistente de an√°lisis econ√≥mico. Puedo ayudarte a interpretar tus indicadores financieros y darte recomendaciones personalizadas."
        ],
        'agradecimiento': [
            "¬°Es un placer ayudarte! El an√°lisis financiero es mi especialidad. ¬øHay algo m√°s que quieras saber?",
            "No hay de qu√©. Recuerda que puedo explicarte cualquier indicador financiero de tu empresa con m√°s detalle.",
            "¬°De nada! Si tienes m√°s preguntas sobre la salud financiera de tu empresa, no dudes en consultarme."
        ],
        'despedida': [
            "¬°Hasta pronto! Recuerda revisar peri√≥dicamente tus indicadores financieros para mantener el control de tu empresa.",
            "Adi√≥s. No olvides implementar las recomendaciones para mejorar la salud financiera de tu negocio. ¬°√âxito!",
            "Que tengas un excelente d√≠a. Estar√© aqu√≠ cuando necesites m√°s an√°lisis o interpretaciones de tus datos financieros."
        ],
        'endeudamiento': [
            "El ratio de endeudamiento muestra qu√© proporci√≥n de tus activos est√° financiada por deuda. Un valor menor generalmente indica una situaci√≥n m√°s s√≥lida, aunque depende del sector.\n\nTe invito a consultar este indicador espec√≠fico para tu empresa escribiendo '¬øC√≥mo est√° mi endeudamiento?'",
            "Para mejorar tu ratio de endeudamiento, podr√≠as:\n‚Ä¢ Aumentar el capital social\n‚Ä¢ Reinvertir beneficios\n‚Ä¢ Vender activos no productivos para reducir deuda\n‚Ä¢ Renegociar plazos de pago.\n\nSi quieres un an√°lisis m√°s detallado de tu situaci√≥n, preg√∫ntame directamente.",
            "Es importante comparar tu ratio de endeudamiento con empresas similares del sector. Cada industria tiene sus particularidades y lo que es alto en un sector puede ser normal en otro.\n\nPuedo analizar la situaci√≥n espec√≠fica de tu empresa si me preguntas sobre tu nivel de endeudamiento."
        ],
        'rentabilidad': [
            "La rentabilidad sobre activos (ROA) indica cu√°nto beneficio generas por cada peso invertido en activos. Un ROA m√°s alto significa que est√°s aprovechando mejor tus recursos.\n\nPara conocer c√≥mo est√° tu rentabilidad, simplemente preg√∫ntame '¬øC√≥mo es mi rentabilidad?'",
            "Para mejorar tu rentabilidad podr√≠as:\n‚Ä¢ Aumentar precios si el mercado lo permite\n‚Ä¢ Reducir costos operativos\n‚Ä¢ Optimizar la gesti√≥n de inventarios\n‚Ä¢ Deshacerte de activos poco productivos.\n\nPreg√∫ntame por un an√°lisis espec√≠fico para tu empresa.",
            "Tu ROA debe compararse con la media del sector. Si est√° por debajo, podr√≠a ser momento de replantearse la estrategia de negocio o buscar nuevas oportunidades de mercado.\n\nPuedo darte una evaluaci√≥n personalizada si me preguntas directamente."
        ],
        'productividad': [
            "La productividad por empleado muestra cu√°nto genera cada trabajador en t√©rminos de ingresos. Es un indicador clave de la eficiencia operativa.\n\nSi quieres saber c√≥mo est√° la productividad en tu empresa, preg√∫ntame directamente.",
            "Para mejorar la productividad podr√≠as:\n‚Ä¢ Invertir en capacitaci√≥n\n‚Ä¢ Mejorar procesos y tecnolog√≠a\n‚Ä¢ Implementar sistemas de incentivos basados en resultados\n‚Ä¢ Revisar la distribuci√≥n de tareas.\n\nConsulta el estado de tu empresa pregunt√°ndome por tu nivel de productividad.",
            "Una baja productividad puede indicar exceso de personal, falta de tecnolog√≠a adecuada, o procesos ineficientes. An√°lisis m√°s profundos te ayudar√°n a identificar los cuellos de botella.\n\nPreg√∫ntame directamente por tu productividad para un an√°lisis espec√≠fico."
        ],
        'cartera': [
            "La rotaci√≥n de cartera indica cu√°ntos d√≠as tardas en cobrar tus ventas a cr√©dito. Una rotaci√≥n m√°s baja es generalmente mejor, ya que mejora tu liquidez.\n\nPara saber c√≥mo est√° tu rotaci√≥n de cartera, puedes preguntarme directamente.",
            "Para mejorar tu rotaci√≥n de cartera, considera:\n‚Ä¢ Revisar pol√≠ticas de cr√©dito\n‚Ä¢ Implementar descuentos por pronto pago\n‚Ä¢ Mejorar el seguimiento de cobros\n‚Ä¢ Evaluar factoring para cuentas problem√°ticas.\n\nPreg√∫ntame espec√≠ficamente por tu rotaci√≥n de cartera para un an√°lisis personalizado.",
            "Una cartera que rota lentamente puede generar problemas de liquidez. Es importante balancear las pol√≠ticas de cr√©dito para no perder clientes pero tampoco arriesgar tu flujo de caja.\n\nSi quieres saber c√≥mo est√° tu rotaci√≥n de cartera, solo preg√∫ntame."
        ],
        'liquidez': [
            "La liquidez se refiere a la capacidad de tu empresa para cumplir con sus obligaciones a corto plazo. Con los datos proporcionados, puedo hacer una estimaci√≥n b√°sica.\n\nSi quieres saber m√°s sobre tu liquidez, preg√∫ntame directamente.",
            "Un buen ratio de liquidez suele estar entre 1.5 y 2.0, indicando que puedes cubrir tus deudas a corto plazo sin problemas.\n\nPara un an√°lisis espec√≠fico de tu empresa, preg√∫ntame por tu liquidez.",
            "Si tienes problemas de liquidez, podr√≠as:\n‚Ä¢ Mejorar la gesti√≥n de cobros\n‚Ä¢ Renegociar plazos con proveedores\n‚Ä¢ Establecer l√≠neas de cr√©dito\n‚Ä¢ Revisar tu ciclo de conversi√≥n de efectivo.\n\nConsulta tu situaci√≥n pregunt√°ndome directamente."
        ],
        'general': [
            "Bas√°ndome en los datos proporcionados, puedo analizar varios aspectos financieros de tu empresa. ¬øHay alg√∫n indicador espec√≠fico que te interese conocer m√°s a fondo?",
            "¬øSab√≠as que el an√°lisis financiero debe ser peri√≥dico? Te recomiendo revisar estos indicadores al menos trimestralmente para detectar tendencias y actuar a tiempo.",
            "Recuerda que cada sector tiene sus propios est√°ndares para los indicadores financieros. Lo importante es identificar tendencias y compararte con empresas similares."
        ]
    }
    
    # Verificar el tipo de mensaje usando NLP
    # Enfoque mejorado analizando palabras clave y contexto
    if any(palabra in mensaje.lower() for palabra in ['hola', 'buenos', 'saludos', 'que tal']):
        categoria = 'saludo'
    elif any(palabra in mensaje.lower() for palabra in ['gracias', 'agradecido', 'agradezco', 'thank']):
        categoria = 'agradecimiento'
    elif any(palabra in mensaje.lower() for palabra in ['adios', 'chao', 'hasta luego', 'nos vemos', 'bye']):
        categoria = 'despedida'
    elif any(palabra in mensaje.lower() for palabra in ['deuda', 'endeudamiento', 'pasivo', 'prestamo', 'financiacion', 'apalancamiento']):
        categoria = 'endeudamiento'
    elif any(palabra in mensaje.lower() for palabra in ['rentabilidad', 'ganancia', 'beneficio', 'rendimiento', 'roa', 'margen','utilidad']):
        categoria = 'rentabilidad'
    elif any(palabra in mensaje.lower() for palabra in ['productividad', 'eficiencia', 'empleado', 'trabajador', 'personal', 'rendimiento']):
        categoria = 'productividad'
    elif any(palabra in mensaje.lower() for palabra in ['cartera', 'cobrar', 'credito', 'rotacion', 'cliente', 'factura', 'cobranza']):
        categoria = 'cartera'
    elif any(palabra in mensaje.lower() for palabra in ['liquidez', 'efectivo', 'caja', 'corriente', 'solvencia', 'flujo']):
        categoria = 'liquidez'
    else:
        # An√°lisis m√°s avanzado basado en similitud sem√°ntica
        temas = {
            'endeudamiento': "deudas financiaci√≥n pasivos pr√©stamos cr√©ditos obligaciones financieras apalancamiento",
            'rentabilidad': "beneficios ganancias rentabilidad margen utilidad rendimiento roa roi retorno inversi√≥n",
            'productividad': "empleados trabajadores personal productividad eficiencia rendimiento laboral desempe√±o",
            'cartera': "cartera cobros cr√©ditos clientes facturas cuentas por cobrar cobranza",
            'liquidez': "liquidez efectivo caja flujo dinero solvencia corto plazo disponible"
        }
        
        # Calcular similitud con cada tema
        mejores_similitudes = {}
        for tema, descripcion in temas.items():
            similitud = similaridad_textos(mensaje.lower(), descripcion)
            mejores_similitudes[tema] = similitud
        
        # Elegir el tema con mayor similitud si supera un umbral
        mejor_tema = max(mejores_similitudes.items(), key=lambda x: x[1])
        if mejor_tema[1] > 0.1:  # Umbral de similitud
            categoria = mejor_tema[0]
        else:
            categoria = 'general'
    
    # Si hay datos de empresa, personalizar respuesta
    if datos_empresa and 'resultados' in datos_empresa:
        resultados = datos_empresa['resultados']
        
        if categoria == 'endeudamiento':
            ratio = resultados['indicadores']['ratio_endeudamiento']
            evaluacion = resultados['evaluacion']['endeudamiento']
            
            # Respuesta detallada y personalizada
            respuesta = f"### üìä An√°lisis de Endeudamiento\n\nTu ratio de endeudamiento es **{ratio:.2f}**, lo cual es considerado **{evaluacion}** para el sector {resultados['sector']}.\n\n"
            
            # A√±adir interpretaci√≥n seg√∫n el valor
            if ratio < 0.4:
                respuesta += "Este valor indica un bajo nivel de endeudamiento, lo que es positivo para la estabilidad financiera, pero podr√≠a estar perdiendo oportunidades de apalancamiento para crecer m√°s r√°pido.\n\n"
            elif ratio < 0.6:
                respuesta += "Este valor muestra un endeudamiento moderado y saludable, un buen balance entre capital propio y ajeno.\n\n"
            else:
                respuesta += "Este nivel de endeudamiento es elevado, lo que podr√≠a aumentar el riesgo financiero y dificultar el acceso a nuevo financiamiento.\n\n"
            
            # A√±adir recomendaciones espec√≠ficas
            if ratio > 0.6:
                respuesta += "**Recomendaciones para reducir tu endeudamiento:**\n\n"
                respuesta += "1. Considera aumentar el capital social o reinvertir beneficios\n"
                respuesta += "2. Eval√∫a la posibilidad de vender activos no estrat√©gicos\n"
                respuesta += "3. Establece un plan gradual de reducci√≥n de deuda\n"
                respuesta += "4. Renegocia condiciones de cr√©dito con tus acreedores\n\n"
            
            return respuesta
            
        elif categoria == 'rentabilidad':
            rent = resultados['indicadores']['rentabilidad']
            evaluacion = resultados['evaluacion']['rentabilidad']
            
            # Respuesta detallada
            respuesta = f"### üí∞ An√°lisis de Rentabilidad\n\nTu rentabilidad sobre activos (ROA) es **{rent:.2%}**, lo cual es considerada **{evaluacion}** para el sector {resultados['sector']}.\n\n"
            
            # Interpretaci√≥n personalizada
            if rent < 0.05:
                respuesta += "Esta rentabilidad es baja. Cada $100 invertidos en activos est√°n generando menos de $5 de beneficio, lo que sugiere revisar la eficiencia operativa y la estructura de costos.\n\n"
                
                # A√±adir recomendaciones espec√≠ficas para baja rentabilidad
                respuesta += "**Recomendaciones para mejorar tu rentabilidad:**\n\n"
                respuesta += "1. Realiza un an√°lisis detallado de costos para identificar ineficiencias\n"
                respuesta += "2. Eval√∫a tu estrategia de precios y considera ajustes si el mercado lo permite\n"
                respuesta += "3. Revisa la productividad de tus activos y considera deshacerte de aquellos poco productivos\n"
                respuesta += "4. Analiza tus l√≠neas de productos/servicios e identifica cu√°les son m√°s rentables\n\n"
                
            elif rent < 0.15:
                respuesta += "Esta rentabilidad es moderada. Tus activos est√°n produciendo un retorno razonable, aunque siempre hay espacio para mejorar.\n\n"
                
                # Recomendaciones para rentabilidad moderada
                respuesta += "**Acciones para optimizar tu rentabilidad:**\n\n"
                respuesta += "1. Busca oportunidades de incremento de eficiencia operativa\n"
                respuesta += "2. Considera estrategias para aumentar el volumen de ventas\n"
                respuesta += "3. Eval√∫a posibilidades de diversificaci√≥n hacia productos/servicios m√°s rentables\n\n"
                
            else:
                respuesta += "¬°Excelente rentabilidad! Tus activos est√°n siendo muy productivos generando un alto retorno sobre la inversi√≥n.\n\n"
                
                # Consejos para mantener alta rentabilidad
                respuesta += "**Para mantener esta excelente rentabilidad:**\n\n"
                respuesta += "1. Documenta tus procesos exitosos para asegurar su continuidad\n"
                respuesta += "2. Considera reinvertir parte de los beneficios para sostener el crecimiento\n"
                respuesta += "3. Monitorea regularmente los indicadores para detectar cambios de tendencia\n\n"
            
            return respuesta
            
        elif categoria == 'productividad':
            productividad = resultados['indicadores']['productividad']
            evaluacion = resultados['evaluacion']['productividad']
            
            # Respuesta detallada
            respuesta = f"### üë• An√°lisis de Productividad\n\nLa productividad por empleado es **${formato_numero(productividad)} COP**, lo cual es considerada **{evaluacion}** para el sector {resultados['sector']}.\n\n"
            
            # Interpretaci√≥n personalizada seg√∫n sector
            sector_limites = {
                'Tecnolog√≠a': 100000000,
                'Comercio': 50000000,
                'Manufactura': 70000000,
                'Servicios': 60000000
            }
            
            limite = sector_limites.get(resultados['sector'], 60000000)
            
            if productividad < limite * 0.7:
                respuesta += "Esta productividad est√° por debajo del est√°ndar del sector. Podr√≠a ser conveniente revisar procesos, capacitaci√≥n y tecnolog√≠a disponible para los empleados.\n\n"
                
                # Recomendaciones espec√≠ficas para baja productividad
                respuesta += "**Estrategias para aumentar la productividad:**\n\n"
                respuesta += "1. Implementa programas de capacitaci√≥n y desarrollo de habilidades\n"
                respuesta += "2. Revisa y optimiza los procesos operativos para eliminar ineficiencias\n"
                respuesta += "3. Eval√∫a la incorporaci√≥n de tecnolog√≠a para automatizar tareas repetitivas\n"
                respuesta += "4. Considera sistemas de incentivos basados en resultados\n\n"
                
            elif productividad < limite * 1.2:
                respuesta += "Esta productividad est√° alineada con los est√°ndares del sector, mostrando una operaci√≥n eficiente.\n\n"
                
                # Consejos para mantener buena productividad
                respuesta += "**Para mantener y mejorar tu productividad:**\n\n"
                respuesta += "1. Establece sistemas de mejora continua en tus procesos\n"
                respuesta += "2. Fomenta la participaci√≥n de los empleados en la identificaci√≥n de mejoras\n"
                respuesta += "3. Realiza evaluaciones peri√≥dicas de desempe√±o y productividad\n\n"
                
            else:
                respuesta += "¬°Excelente productividad! Tus empleados generan un valor significativamente superior al promedio del sector.\n\n"
                
                # Estrategias para mantener alta productividad
                respuesta += "**Para mantener este excelente nivel:**\n\n"
                respuesta += "1. Documenta y estandariza las mejores pr√°cticas actuales\n"
                respuesta += "2. Reconoce y premia el alto desempe√±o para mantener la motivaci√≥n\n"
                respuesta += "3. Comparte el conocimiento entre equipos para extender el √©xito\n\n"
            
            return respuesta
            
        elif categoria == 'cartera':
            rotacion = resultados['indicadores']['rotacion_cartera']
            evaluacion = resultados['evaluacion']['rotacion']
            
            # Respuesta detallada
            respuesta = f"### üìÖ An√°lisis de Rotaci√≥n de Cartera\n\nTu rotaci√≥n de cartera es de **{rotacion:.1f} d√≠as**, lo cual es considerado **{evaluacion}** para el sector {resultados['sector']}.\n\n"
            
            # Interpretaci√≥n personalizada
            if rotacion < 30:
                respuesta += "¬°Excelente gesti√≥n de cobros! Tu empresa recupera el dinero r√°pidamente, lo que favorece la liquidez.\n\n"
                
                # Consejos para mantener buena rotaci√≥n
                respuesta += "**Para mantener esta excelente rotaci√≥n:**\n\n"
                respuesta += "1. Documenta tus pol√≠ticas y procesos de cobranza actuales\n"
                respuesta += "2. Mant√©n actualizada tu base de datos de clientes\n"
                respuesta += "3. Contin√∫a con los incentivos por pronto pago si los tienes implementados\n\n"
                
            elif rotacion < 60:
                respuesta += "Tu gesti√≥n de cobros es adecuada. Mantiene un buen equilibrio entre pol√≠tica comercial y necesidades de liquidez.\n\n"
                
                # Consejos para mejorar una rotaci√≥n adecuada
                respuesta += "**Para optimizar a√∫n m√°s tu rotaci√≥n:**\n\n"
                respuesta += "1. Segmenta a tus clientes por comportamiento de pago\n"
                respuesta += "2. Implementa recordatorios autom√°ticos antes del vencimiento\n"
                respuesta += "3. Eval√∫a ofrecer peque√±os descuentos por pronto pago\n\n"
                
            else:
                respuesta += "Tu periodo de cobro es extenso, lo que podr√≠a estar afectando tu flujo de caja. Considera revisar tus pol√≠ticas de cr√©dito y cobranza.\n\n"
                
                # Estrategias para mejorar rotaci√≥n alta
                respuesta += "**Estrategias para reducir tu periodo de cobro:**\n\n"
                respuesta += "1. Revisa y actualiza tus pol√≠ticas de cr√©dito y criterios de selecci√≥n de clientes\n"
                respuesta += "2. Implementa un sistema de seguimiento m√°s estricto para facturas pendientes\n"
                respuesta += "3. Considera ofrecer descuentos significativos por pronto pago\n"
                respuesta += "4. Eval√∫a opciones de factoring para casos problem√°ticos o clientes estrat√©gicos\n\n"
            
            return respuesta
            
        elif categoria == 'liquidez':
            # Estimaci√≥n aproximada de liquidez basada en cartera y deudas
            cartera = resultados['datos']['cartera']
            deudas = resultados['datos']['deudas']
            
            # C√°lculo simplificado (solo con los datos disponibles)
            est_liquidez = cartera / deudas if deudas > 0 else "Alta"
            
            # Respuesta
            if isinstance(est_liquidez, str):
                respuesta = f"### üíß Estimaci√≥n de Liquidez\n\nBasado en los datos proporcionados, tu empresa parece tener una liquidez **{est_liquidez}**, ya que tus deudas son m√≠nimas en comparaci√≥n con tu cartera.\n\n"
                
                respuesta += "**Recomendaciones para gestionar tu alta liquidez:**\n\n"
                respuesta += "1. Eval√∫a oportunidades de inversi√≥n para recursos excedentes\n"
                respuesta += "2. Considera expandir operaciones o diversificar\n"
                respuesta += "3. Revisa tu pol√≠tica de dividendos si corresponde\n\n"
                
            else:
                respuesta = f"### üíß Estimaci√≥n de Liquidez\n\nLa relaci√≥n entre tu cartera y tus deudas es de **{est_liquidez:.2f}**.\n\n"
                
                if est_liquidez < 1:
                    respuesta += "Esto podr√≠a indicar problemas de liquidez a corto plazo, ya que tu cartera no cubrir√≠a todas tus deudas.\n\n"
                    
                    # Estrategias para mejorar liquidez baja
                    respuesta += "**Estrategias para mejorar tu liquidez:**\n\n"
                    respuesta += "1. Acelera la cobranza de cartera con incentivos de pronto pago\n"
                    respuesta += "2. Negocia extensiones de plazo con proveedores\n"
                    respuesta += "3. Eval√∫a l√≠neas de cr√©dito de contingencia\n"
                    respuesta += "4. Considera vender activos no esenciales si es necesario\n\n"
                    
                elif est_liquidez < 1.5:
                    respuesta += "Tu liquidez es ajustada pero manejable. Mant√©n un control cercano de tu flujo de caja.\n\n"
                    
                    # Consejos para liquidez ajustada
                    respuesta += "**Para mejorar tu posici√≥n de liquidez:**\n\n"
                    respuesta += "1. Implementa un sistema de proyecci√≥n semanal de flujo de caja\n"
                    respuesta += "2. Revisa tus pol√≠ticas de inventario para optimizar capital de trabajo\n"
                    respuesta += "3. Establece alertas tempranas para posibles problemas de liquidez\n\n"
                    
                else:
                    respuesta += "Tu posici√≥n de liquidez parece s√≥lida, con suficiente cartera para cubrir tus obligaciones.\n\n"
                    
                    # Consejos para gestionar buena liquidez
                    respuesta += "**Para optimizar tu gesti√≥n de liquidez:**\n\n"
                    respuesta += "1. Eval√∫a opciones de inversi√≥n temporal para excedentes\n"
                    respuesta += "2. Considera negociar mejores condiciones con proveedores\n"
                    respuesta += "3. Mant√©n un fondo de contingencia para oportunidades o emergencias\n\n"
            
            return respuesta
            
        # Si la categor√≠a no coincide con ninguna de las anteriores, dar respuesta general
        else:
            # Respuesta general sobre el estado de la empresa
            estado = resultados['estado_general']
            
            respuesta = f"### üìà Estado General de la Empresa\n\nBasado en mis an√°lisis, la situaci√≥n financiera general de **{resultados['nombre']}** es **{estado}**.\n\n"
            
            # A√±adir resumen de los puntos principales
            respuesta += "**Resumen de indicadores clave:**\n\n"
            respuesta += f"‚Ä¢ Endeudamiento: {resultados['indicadores']['ratio_endeudamiento']:.2f} - {resultados['evaluacion']['endeudamiento']}\n"
            respuesta += f"‚Ä¢ Rentabilidad: {resultados['indicadores']['rentabilidad']:.2%} - {resultados['evaluacion']['rentabilidad']}\n"
            respuesta += f"‚Ä¢ Productividad: ${formato_numero(resultados['indicadores']['productividad'])} por empleado - {resultados['evaluacion']['productividad']}\n"
            respuesta += f"‚Ä¢ Rotaci√≥n de cartera: {resultados['indicadores']['rotacion_cartera']:.1f} d√≠as - {resultados['evaluacion']['rotacion']}\n\n"
            
            respuesta += "Para recibir un an√°lisis detallado de cualquiera de estos indicadores, puedes preguntarme espec√≠ficamente por ello.\n\n"
            
            # Sugerir pr√≥ximos pasos seg√∫n el estado general
            if estado == "Excelente":
                respuesta += "**¬øQu√© te interesar√≠a saber para mantener este excelente desempe√±o?**"
            elif estado == "Bueno":
                respuesta += "**¬øQu√© aspecto te gustar√≠a mejorar para llevar tu empresa al siguiente nivel?**"
            elif estado == "Regular":
                respuesta += "**¬øSobre qu√© √°rea te gustar√≠a trabajar primero para mejorar la situaci√≥n?**"
            else:  # Cr√≠tico
                respuesta += "**Es importante actuar pronto. ¬øQu√© aspecto te preocupa m√°s y quieres abordar primero?**"
                
            return respuesta
    
    # Si no hay datos de empresa o la consulta es general
    # Usar POS tagging para identificar verbos y sustantivos clave
    verbos = [word for word, tag in pos_tags if tag == 'VERB']
    sustantivos = [word for word, tag in pos_tags if tag in ['NOUN', 'PROPN']]
    
    # Personalizaci√≥n b√°sica basada en palabras extra√≠das
    if verbos and sustantivos:
        accion = verbos[0]
        tema = sustantivos[0] if sustantivos else "empresa"
        respuesta = f"Entiendo que quieres {accion} sobre {tema}. "
        respuesta += random.choice(mensajes_predefinidos[categoria])
        return respuesta
    
    # Si no hay suficiente contexto para personalizar, usar respuesta predefinida
    return random.choice(mensajes_predefinidos[categoria])

# Variables para almacenar datos de la empresa y resultados
if 'datos_empresa' not in st.session_state:
    st.session_state.datos_empresa = None

if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []

if 'page_view' not in st.session_state:
    st.session_state.page_view = "welcome"  # Opciones: "welcome", "chat", "form", "results"

if 'thinking' not in st.session_state:
    st.session_state.thinking = False

# Sidebar con informaci√≥n y navegaci√≥n
with st.sidebar:
    st.markdown('<div class="main-title">FinanzGPT</div>', unsafe_allow_html=True)
    st.markdown('<div class="sub-title">Asistente Financiero Empresarial</div>', unsafe_allow_html=True)
    
    # Opciones de navegaci√≥n
    st.markdown("### Navegaci√≥n")
    
    # Contenedor para botones de navegaci√≥n
    nav_col1, nav_col2 = st.columns([1, 1])
    
    with nav_col1:
        # Bot√≥n de Inicio
        if st.session_state.page_view == "welcome":
            st.markdown('<div class="nav-button-active">üè† Inicio</div>', unsafe_allow_html=True)
        else:
            if st.button("üè† Inicio", key="home_btn", use_container_width=True):
                st.session_state.page_view = "welcome"
                st.rerun()
        
        # Bot√≥n de Chat
        if st.session_state.page_view == "chat":
            st.markdown('<div class="nav-button-active">üí¨ Chat</div>', unsafe_allow_html=True)
        else:
            if st.button("üí¨ Chat", key="chat_btn", use_container_width=True):
                st.session_state.page_view = "chat"
                st.rerun()
    
    with nav_col2:
        # Bot√≥n de Formulario
        if st.session_state.page_view == "form":
            st.markdown('<div class="nav-button-active">üìù Datos</div>', unsafe_allow_html=True)
        else:
            if st.button("üìù Datos", key="form_btn", use_container_width=True):
                st.session_state.page_view = "form"
                st.rerun()
        
        # Bot√≥n de Resultados
        if st.session_state.page_view == "results":
            st.markdown('<div class="nav-button-active">üìä An√°lisis</div>', unsafe_allow_html=True)
        else:
            if st.button("üìä An√°lisis", key="results_btn", use_container_width=True):
                if st.session_state.datos_empresa:
                    st.session_state.page_view = "results"
                    st.rerun()
                else:
                    st.warning("Primero debes ingresar los datos de tu empresa.")
    
    st.markdown("---")
    
    # Informaci√≥n sobre la aplicaci√≥n
    with st.expander("‚ÑπÔ∏è Acerca de FinanzGPT"):
        st.markdown("""
        FinanzGPT utiliza t√©cnicas avanzadas de procesamiento de lenguaje natural para analizar y evaluar la salud financiera de empresas.
        
        **Tecnolog√≠as utilizadas:**
        
        * **Tokenizaci√≥n**: Divide el texto en unidades individuales
        * **Lematizaci√≥n**: Reduce palabras a su forma base
        * **POS Tagging**: Etiquetado gramatical
        * **Embedding**: Representaci√≥n vectorial del texto
        
        **Indicadores financieros analizados:**
        * Ratio de endeudamiento
        * Rentabilidad sobre activos
        * Productividad por empleado
        * Rotaci√≥n de cartera
        """)
    
    # Bot√≥n para limpiar historial de chat
    if st.button("üóëÔ∏è Limpiar conversaci√≥n", use_container_width=True):
        st.session_state.chat_history = []
        st.info("Historial de chat borrado")
        time.sleep(1)
        st.rerun()
    
    st.markdown("---")
    st.markdown('<div style="text-align: center; color: #888;">Desarrollado con ‚ù§Ô∏è usando Python y Streamlit</div>', unsafe_allow_html=True)

# Pantalla de bienvenida
if st.session_state.page_view == "welcome":
    st.markdown('<div class="main-title">Bienvenido a FinanzGPT</div>', unsafe_allow_html=True)
    
    # Contenedor principal
    welcome_container = st.container()
    
    with welcome_container:
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.markdown("""
        ### Tu asistente inteligente para an√°lisis financiero empresarial
        
        FinanzGPT te permite analizar la salud econ√≥mica de tu empresa a trav√©s de un an√°lisis detallado de tus principales indicadores financieros.
        
        **¬øC√≥mo funciona?**
        
        1. Ingresa los datos b√°sicos de tu empresa
        2. Nuestro sistema realiza un an√°lisis completo
        3. Conversa con FinanzGPT y recibe respuestas personalizadas
        
        Utiliza el poder del procesamiento de lenguaje natural para obtener insights valiosos sobre tu negocio.
        """)
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Botones de inicio
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üìù Ingresar datos de mi empresa", use_container_width=True):
                st.session_state.page_view = "form"
                st.rerun()
        
        with col2:
            if st.session_state.datos_empresa:
                if st.button("üí¨ Ir al chat", use_container_width=True):
                    st.session_state.page_view = "chat"
                    st.rerun()
            else:
                st.button("üí¨ Ir al chat (primero ingresa datos)", use_container_width=True, disabled=True)
        
        # Ejemplos de preguntas
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.markdown("""
        ### Ejemplos de preguntas que puedes hacer
        
        Una vez que hayas ingresado los datos de tu empresa, podr√°s consultar a FinanzGPT sobre:
        
        - "¬øC√≥mo est√° mi nivel de endeudamiento?"
        - "¬øEs buena mi rentabilidad?"
        - "¬øQu√© puedo hacer para mejorar la productividad?"
        - "¬øC√≥mo optimizar mi rotaci√≥n de cartera?"
        - "Dame un resumen general de mi empresa"
        - "Ayuda" (para ver un men√∫ de opciones)
        """)
        st.markdown('</div>', unsafe_allow_html=True)

# Vista de chat
elif st.session_state.page_view == "chat":
    st.markdown('<div class="main-title">üí¨ Chat con FinanzGPT</div>', unsafe_allow_html=True)
    
    # Si no hay datos de empresa, mostrar mensaje
    if not st.session_state.datos_empresa:
        st.info("üëã Para obtener respuestas personalizadas sobre tu empresa, primero debes ingresar tus datos financieros en la secci√≥n 'Datos'.")
    
    # Contenedor para el historial de chat
    chat_container = st.container()
    
    # Mostrar historial de chat con estilos mejorados
    with chat_container:
        if not st.session_state.chat_history:
            st.markdown("""
            <div style="text-align: center; margin: 50px 0; color: #888;">
                <p>üëã ¬°Hola! Soy FinanzGPT, tu asistente financiero.</p>
                <p>Puedes preguntarme sobre indicadores financieros, recomendaciones para tu empresa, o cualquier duda sobre an√°lisis econ√≥mico.</p>
                <p>Escribe "ayuda" si necesitas ver un men√∫ de opciones.</p>
            </div>
            """, unsafe_allow_html=True)
        
        for sender, message in st.session_state.chat_history:
            if sender == "user":
                st.markdown(f"""
                <div class="chat-message-user">
                    <div class="avatar avatar-user">U</div>
                    <div class="message-content">{message}</div>
                </div>
                """, unsafe_allow_html=True)
            else:
                # Convertir marcadores markdown en mensaje HTML
                # Procesar encabezados
                message = re.sub(r'### (.*)', r'<h3>\1</h3>', message)
                # Procesar negritas
                message = re.sub(r'\*\*(.*?)\*\*', r'<strong>\1</strong>', message)
                # Procesar it√°licas
                message = re.sub(r'\*(.*?)\*', r'<em>\1</em>', message)
                # Procesar listas con vi√±etas
                message = re.sub(r'‚Ä¢ (.*)', r'<li>\1</li>', message)
                message = message.replace('<li>', '<ul><li>').replace('</li>\n\n', '</li></ul>\n\n')
                
                st.markdown(f"""
                <div class="chat-message-bot">
                    <div class="avatar avatar-bot">F</div>
                    <div class="message-content">{message}</div>
                </div>
                """, unsafe_allow_html=True)
    
    # Manejar el estado "pensando"
    if st.session_state.thinking:
        st.markdown("""
        <div class="thinking-animation">
            <div class="thinking-dot"></div>
            <div class="thinking-dot"></div>
            <div class="thinking-dot"></div>
        </div>
        """, unsafe_allow_html=True)
    
    # Input para chatbot
    mensaje_usuario = st.chat_input("Escribe tu pregunta aqu√≠...")
    
    if mensaje_usuario:
        # Agregar mensaje del usuario al historial
        st.session_state.chat_history.append(("user", mensaje_usuario))
        
        # Activar animaci√≥n de pensamiento
        st.session_state.thinking = True
        st.rerun()

# Este c√≥digo se ejecuta despu√©s del rerun cuando thinking es True
if st.session_state.thinking and st.session_state.chat_history:
    # Desactivar el estado "pensando"
    st.session_state.thinking = False
    
    # Obtener la √∫ltima pregunta del usuario
    ultima_pregunta = [msg for sender, msg in st.session_state.chat_history if sender == "user"][-1]
    
    # Generar respuesta del chatbot
    respuesta = chatbot_response(ultima_pregunta, st.session_state.datos_empresa)
    
    # Agregar respuesta al historial
    st.session_state.chat_history.append(("bot", respuesta))
    
    # Actualizar chat
    st.rerun()

# Vista de formulario
elif st.session_state.page_view == "form":
    st.markdown('<div class="main-title">üìù Datos de la Empresa</div>', unsafe_allow_html=True)
    st.markdown('<div class="sub-title">Ingresa la informaci√≥n financiera para obtener un an√°lisis personalizado</div>', unsafe_allow_html=True)
    
    with st.form("formulario_empresa"):
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.markdown("### Informaci√≥n General")
        
        nombre_empresa = st.text_input("Nombre de la Empresa", 
                                       value="" if not st.session_state.datos_empresa else st.session_state.datos_empresa.get('datos', {}).get('nombre', ""))
        
        sector = st.selectbox(
            "Sector",
            ["Tecnolog√≠a", "Comercio", "Manufactura", "Servicios", "Otro"],
            index=0 if not st.session_state.datos_empresa else 
                  ["Tecnolog√≠a", "Comercio", "Manufactura", "Servicios", "Otro"].index(st.session_state.datos_empresa.get('datos', {}).get('sector', "Tecnolog√≠a"))
        )
        st.markdown('</div>', unsafe_allow_html=True)
        
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.markdown("### Informaci√≥n Financiera")
        # Crear dos columnas para los inputs num√©ricos
        col1_form, col2_form = st.columns(2)
        
        with col1_form:
            ganancias = st.number_input(
                "Ganancias Anuales (COP)", 
                min_value=0.0, 
                format="%f",
                value=0.0 if not st.session_state.datos_empresa else st.session_state.datos_empresa.get('datos', {}).get('ganancias', 0.0)
            )
            st.markdown("""<div style="font-size: 12px; color: #666;">Ingresos totales menos gastos</div>""", unsafe_allow_html=True)
            
            num_empleados = st.number_input(
                "N√∫mero de Empleados", 
                min_value=1, 
                step=1,
                value=1 if not st.session_state.datos_empresa else st.session_state.datos_empresa.get('datos', {}).get('empleados', 1)
            )
            st.markdown("""<div style="font-size: 12px; color: #666;">Personal en n√≥mina</div>""", unsafe_allow_html=True)
            
            valor_cartera = st.number_input(
                "Valor en Cartera (COP)", 
                min_value=0.0, 
                format="%f",
                value=0.0 if not st.session_state.datos_empresa else st.session_state.datos_empresa.get('datos', {}).get('cartera', 0.0)
            )
            st.markdown("""<div style="font-size: 12px; color: #666;">Total de cuentas por cobrar</div>""", unsafe_allow_html=True)
        
        with col2_form:
            valor_activos = st.number_input(
                "Valor en Activos (COP)", 
                min_value=0.0, 
                format="%f",
                value=0.0 if not st.session_state.datos_empresa else st.session_state.datos_empresa.get('datos', {}).get('activos', 0.0)
            )
            st.markdown("""<div style="font-size: 12px; color: #666;">Total de bienes y derechos</div>""", unsafe_allow_html=True)
            
            valor_deudas = st.number_input(
                "Valor Deudas (COP)", 
                min_value=0.0, 
                format="%f",
                value=0.0 if not st.session_state.datos_empresa else st.session_state.datos_empresa.get('datos', {}).get('deudas', 0.0)
            )
            st.markdown("""<div style="font-size: 12px; color: #666;">Total de obligaciones financieras</div>""", unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        with col1:
            submitted = st.form_submit_button("Analizar Empresa", use_container_width=True)
        with col2:
            if st.session_state.datos_empresa:
                cancel = st.form_submit_button("Cancelar", use_container_width=True)
                if cancel:
                    st.session_state.page_view = "welcome"
                    st.rerun()
        
        if submitted:
            # Validar entradas
            errores = []
            
            if not nombre_empresa.strip():
                errores.append("El nombre de la empresa es obligatorio.")
            
            valid_ganancias, msg = validar_numeros(ganancias, 0.0, "valor de ganancias")
            if not valid_ganancias:
                errores.append(msg)
            
            valid_activos, msg = validar_numeros(valor_activos, 0.0, "valor de activos")
            if not valid_activos:
                errores.append(msg)
                
            valid_empleados, msg = validar_numeros(num_empleados, 1, "n√∫mero de empleados")
            if not valid_empleados:
                errores.append(msg)
                
            valid_cartera, msg = validar_numeros(valor_cartera, 0.0, "valor en cartera")
            if not valid_cartera:
                errores.append(msg)
                
            valid_deudas, msg = validar_numeros(valor_deudas, 0.0, "valor en deudas")
            if not valid_deudas:
                errores.append(msg)
            
            # Si hay errores, mostrarlos
            if errores:
                error_text = "\n".join([f"‚Ä¢ {error}" for error in errores])
                st.error(f"Por favor, corrige los siguientes errores:\n\n{error_text}")
            else:
                # Preparar datos
                datos = {
                    'nombre': nombre_empresa,
                    'ganancias': ganancias,
                    'sector': sector,
                    'empleados': num_empleados,
                    'activos': valor_activos,
                    'cartera': valor_cartera,
                    'deudas': valor_deudas
                }
                
                # Mostrar animaci√≥n de procesamiento
                mostrar_procesamiento()
                
                # Realizar an√°lisis
                resultados = analizar_empresa(datos)
                mensaje = generar_mensaje_resultado(resultados)
                
                # Guardar datos y resultados en sesi√≥n
                st.session_state.datos_empresa = {
                    'datos': datos,
                    'resultados': resultados,
                    'mensaje': mensaje
                }
                
                # Agregar mensaje de bienvenida al chat si es el primer an√°lisis
                if not st.session_state.chat_history:
                    bienvenida = f"¬°Hola! He analizado los datos de **{nombre_empresa}**. El estado financiero general de tu empresa es **{resultados['estado_general']}**.\n\n¬øQu√© te gustar√≠a saber espec√≠ficamente sobre tus indicadores financieros?"
                    st.session_state.chat_history.append(("bot", bienvenida))
                
                # Cambiar a vista de resultados
                st.session_state.page_view = "results"
                st.rerun()

# Vista de resultados
elif st.session_state.page_view == "results":
    if not st.session_state.datos_empresa:
        st.warning("No hay datos de empresa para mostrar. Por favor, completa el formulario primero.")
        st.session_state.page_view = "form"
        st.rerun()
    else:
        resultados = st.session_state.datos_empresa['resultados']
        
        st.markdown('<div class="main-title">üìä An√°lisis Financiero</div>', unsafe_allow_html=True)
        st.markdown(f"<div class='sub-title'>Empresa: {resultados['nombre']} | Sector: {resultados['sector']}</div>", unsafe_allow_html=True)
        
        # Estado general con estilo mejorado
        estado = resultados['estado_general'].lower()
        st.markdown(f"""
        <div class="card">
            <div class="estado-{estado}">
                <h2>Estado Financiero: {resultados['estado_general']}</h2>
            </div>
            <div style="text-align: center; margin-top: 15px; font-style: italic;">
                <p>El an√°lisis se basa en la comparaci√≥n de tus indicadores con est√°ndares del sector {resultados['sector']}.</p>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Contenedor para los indicadores principales
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.markdown("### üìà Indicadores Clave")
        
        # Crear 4 columnas para mostrar los indicadores principales
        col1_ind, col2_ind = st.columns(2)
        
        with col1_ind:
            ratio = resultados['indicadores']['ratio_endeudamiento']
            eval_ind = resultados['evaluacion']['endeudamiento']
            color = "green" if eval_ind == "bueno" else "red"
            
            st.markdown(f"""
            <div class="highlight-metric">
                <strong>‚öñÔ∏è Endeudamiento</strong><br>
                <span style="font-size: 1.4rem; color: {'#10A37F' if eval_ind == 'bueno' else '#EF4444'}">{ratio:.2f}</span><br>
                <span style="font-size: 0.9rem;">Evaluaci√≥n: {eval_ind.capitalize()}</span>
            </div>
            """, unsafe_allow_html=True)
            
            rent = resultados['indicadores']['rentabilidad']
            eval_ind = resultados['evaluacion']['rentabilidad']
            color = "green" if eval_ind == "buena" else "red"
            
            st.markdown(f"""
            <div class="highlight-metric">
                <strong>üí∞ Rentabilidad</strong><br>
                <span style="font-size: 1.4rem; color: {'#10A37F' if eval_ind == 'buena' else '#EF4444'}">{rent:.2%}</span><br>
                <span style="font-size: 0.9rem;">Evaluaci√≥n: {eval_ind.capitalize()}</span>
            </div>
            """, unsafe_allow_html=True)
        
        with col2_ind:
            prod = resultados['indicadores']['productividad']
            eval_ind = resultados['evaluacion']['productividad']
            color = "green" if eval_ind == "buena" else "red"
            
            st.markdown(f"""
            <div class="highlight-metric">
                <strong>üë• Productividad</strong><br>
                <span style="font-size: 1.4rem; color: {'#10A37F' if eval_ind == 'buena' else '#EF4444'}">${formato_numero(prod)}</span><br>
                <span style="font-size: 0.9rem;">Evaluaci√≥n: {eval_ind.capitalize()}</span>
            </div>
            """, unsafe_allow_html=True)
            
            rot = resultados['indicadores']['rotacion_cartera']
            eval_ind = resultados['evaluacion']['rotacion']
            color = "green" if eval_ind == "buena" else "red"
            
            st.markdown(f"""
            <div class="highlight-metric">
                <strong>üìÖ Rotaci√≥n Cartera</strong><br>
                <span style="font-size: 1.4rem; color: {'#10A37F' if eval_ind == 'buena' else '#EF4444'}">{rot:.1f} d√≠as</span><br>
                <span style="font-size: 0.9rem;">Evaluaci√≥n: {eval_ind.capitalize()}</span>
            </div>
            """, unsafe_allow_html=True)
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Recomendaciones
        if resultados['recomendaciones']:
            st.markdown('<div class="card">', unsafe_allow_html=True)
            st.markdown("### üí° Recomendaciones")
            
            for i, rec in enumerate(resultados['recomendaciones'], 1):
                st.markdown(f"""
                <div class="recomendacion">
                    <strong>Recomendaci√≥n {i}:</strong> {rec}
                </div>
                """, unsafe_allow_html=True)
                
            st.markdown('</div>', unsafe_allow_html=True)
        
        # Gr√°fico de indicadores
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.markdown("### üìä Visualizaci√≥n de Indicadores")
        
        # Creamos la figura con un estilo m√°s moderno
        plt.style.use('seaborn-v0_8-whitegrid')
        fig, ax = plt.subplots(figsize=(8, 8), subplot_kw=dict(polar=True), facecolor='#FFFFFF')
        
        # Normalizar valores para el gr√°fico
        endeudamiento_norm = 1 - min(1, resultados['indicadores']['ratio_endeudamiento'] / 1.0)
        rentabilidad_norm = min(1, resultados['indicadores']['rentabilidad'] / 0.3)
        
        # Para productividad, normalizar seg√∫n sector
        sector_limites = {
            'Tecnolog√≠a': 100000000,
            'Comercio': 50000000,
            'Manufactura': 70000000,
            'Servicios': 60000000,
            'Otro': 60000000
        }
        
        limite_prod = sector_limites.get(resultados['sector'], 60000000)
        productividad_norm = min(1, resultados['indicadores']['productividad'] / limite_prod)
        
        # Para rotaci√≥n, menor es mejor (normalizar de forma inversa)
        rotacion_norm = 1 - min(1, resultados['indicadores']['rotacion_cartera'] / 90)
        
        # Datos para el gr√°fico
        categorias = ['Endeudamiento', 'Rentabilidad', 'Productividad', 'Rot. Cartera']
        valores = [endeudamiento_norm, rentabilidad_norm, productividad_norm, rotacion_norm]
        
        # Completar el c√≠rculo repitiendo el primer valor
        valores += [valores[0]]
        categorias += [categorias[0]]
        
        # Configuraci√≥n est√©tica
        N = len(categorias) - 1
        angles = [n / float(N) * 2 * np.pi for n in range(N)]
        angles += [angles[0]]  # Cerrar el c√≠rculo
        
        # Dibujar los ejes y el gr√°fico
        ax.plot(angles, valores, linewidth=2.5, linestyle='solid', color='#10A37F')
        ax.fill(angles, valores, alpha=0.25, color='#10A37F')
        
        # Agregar etiquetas con mejor formato
        ax.set_xticks(angles[:-1])
        ax.set_xticklabels(categorias[:-1], size=12, fontweight='bold', color='#444654')
        
        # Mejorar las l√≠neas de la cuadr√≠cula
        ax.set_rlabel_position(0)
        ax.set_yticks([0.2, 0.4, 0.6, 0.8, 1.0])
        ax.set_yticklabels(['20%', '40%', '60%', '80%', '100%'], color="grey", size=10)
        ax.set_ylim(0, 1)
        
        # Agregar t√≠tulo
        plt.title('Perfil Econ√≥mico de la Empresa', size=16, color='#444654', pad=20, fontweight='bold')
        
        # Mostramos el gr√°fico
        st.pyplot(fig)
        st.markdown('</div>', unsafe_allow_html=True)
        
        # An√°lisis NLP
        with st.expander("üß† Procesamiento de Lenguaje Natural"):
            st.markdown('<div class="card">', unsafe_allow_html=True)
            
            tab1, tab2, tab3, tab4 = st.tabs(["Tokenizaci√≥n", "Lematizaci√≥n", "POS Tagging", "Embedding"])
            
            with tab1:
                st.markdown("#### üîç Tokenizaci√≥n")
                st.markdown("La tokenizaci√≥n divide el texto en unidades individuales (tokens):")
                st.code(str(resultados['nlp_ejemplo']['tokens']))
                st.markdown("""
                **¬øPara qu√© sirve?** Permite analizar el texto palabra por palabra, lo que es fundamental para el procesamiento del lenguaje natural.
                """)
            
            with tab2:
                st.markdown("#### üìù Lematizaci√≥n")
                st.markdown("La lematizaci√≥n reduce las palabras a su forma base o lema:")
                st.code(str(resultados['nlp_ejemplo']['lemas']))
                st.markdown("""
                **¬øPara qu√© sirve?** Permite considerar diferentes formas de una palabra como la misma, mejorando el an√°lisis sem√°ntico del texto.
                """)
            
            with tab3:
                st.markdown("#### üè∑Ô∏è POS Tagging")
                st.markdown("El etiquetado gramatical (Part-of-Speech) identifica la funci√≥n gramatical de cada palabra:")
                st.code(str(resultados['nlp_ejemplo']['pos_tags']))
                st.markdown("""
                **¬øPara qu√© sirve?** Ayuda a entender la estructura gramatical del texto, identificando verbos, sustantivos, adjetivos, etc.
                """)
            
            with tab4:
                st.markdown("#### üßÆ Embedding")
                st.markdown("El embedding transforma el texto en vectores num√©ricos que capturan significado sem√°ntico:")
                st.code(f"Dimensi√≥n del embedding: {resultados['nlp_ejemplo']['embedding_dim']}")
                st.markdown("""
                **¬øPara qu√© sirve?** Permite representar palabras y frases como vectores, facilitando c√°lculos de similitud sem√°ntica y otros an√°lisis avanzados.
                """)
            
            st.markdown('</div>', unsafe_allow_html=True)
        
        # Botones de acci√≥n
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üí¨ Consultar al Chatbot", use_container_width=True):
                st.session_state.page_view = "chat"
                st.rerun()
        
        with col2:
            if st.button("üìù Modificar datos", use_container_width=True):
                st.session_state.page_view = "form"
                st.rerun()

# C√≥digo principal
if __name__ == "__main__":
    # Todo el c√≥digo ya est√° definido arriba
    pass